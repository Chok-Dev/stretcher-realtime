<?php
// app/Observers/StretcherRequestObserver.php

namespace App\Observers;

use App\Models\StretcherRegister;
use App\Events\NewStretcherRequest;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;

class StretcherRequestObserver
{
    /**
     * Handle the StretcherRegister "created" event.
     */
    public function created(StretcherRegister $stretcherRequest)
    {
        try {
            Log::info('üÜï New stretcher request detected', [
                'request_id' => $stretcherRequest->stretcher_register_id,
                'hn' => $stretcherRequest->hn,
                'priority' => $stretcherRequest->stretcher_priority_name
            ]);

            // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô array ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö event
            $requestData = $stretcherRequest->notification_data;

            // Fire NewStretcherRequest event
            broadcast(new NewStretcherRequest($requestData));

            // ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            $this->sendNotifications($requestData);

            Log::info('‚úÖ New request event fired and notifications sent', [
                'request_id' => $stretcherRequest->stretcher_register_id
            ]);

        } catch (\Exception $e) {
            Log::error('‚ùå Failed to handle new stretcher request', [
                'request_id' => $stretcherRequest->stretcher_register_id ?? 'unknown',
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
        }
    }

    /**
     * ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
     */
    private function sendNotifications($requestData)
    {
        try {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            $message = $this->buildNewRequestMessage($requestData);

            // ‡∏™‡πà‡∏á‡πÑ‡∏õ Telegram
            $this->sendTelegramNotification($message);

            // ‡∏™‡πà‡∏á‡πÑ‡∏õ MoPH
            $this->sendMorphromNotification($message);

            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡πà‡∏ß‡∏ô ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°
            if (in_array($requestData['stretcher_priority_name'], ['‡∏î‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î', '‡∏î‡πà‡∏ß‡∏ô'])) {
                $this->sendUrgentNotifications($requestData, $message);
            }

        } catch (\Exception $e) {
            Log::error('‚ùå Failed to send notifications', [
                'error' => $e->getMessage(),
                'request_data' => $requestData
            ]);
        }
    }

    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
     */
    private function buildNewRequestMessage($request)
    {
        $urgencyIcon = match($request['stretcher_priority_name']) {
            '‡∏î‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î' => 'üî¥‚ö°‚ö°',
            '‡∏î‡πà‡∏ß‡∏ô' => 'üü†‚ö°',
            '‡∏õ‡∏Å‡∏ï‡∏¥' => 'üü°',
            '‡πÑ‡∏°‡πà‡∏î‡πà‡∏ß‡∏ô' => 'üü¢',
            default => '‚≠ï'
        };

        $message = "üö® ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡πÄ‡∏õ‡∏•‡πÉ‡∏´‡∏°‡πà!\n";
        $message .= "=================================\n";
        $message .= "üè• HN: {$request['hn']}\n";
        $message .= "üë§ ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: {$request['pname']}{$request['fname']} {$request['lname']}\n";
        $message .= "{$urgencyIcon} ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô: {$request['stretcher_priority_name']}\n";
        $message .= "üõèÔ∏è ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏õ‡∏•: {$request['stretcher_type_name']}\n";
        
        if (!empty($request['stretcher_o2tube_type_name'])) {
            $message .= "ü´Å ‡∏≠‡∏≠‡∏Å‡∏ã‡∏¥‡πÄ‡∏à‡∏ô: {$request['stretcher_o2tube_type_name']}\n";
        }
        
        if (!empty($request['stretcher_emergency_name'])) {
            $message .= "üö® ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô: {$request['stretcher_emergency_name']}\n";
        }
        
        $message .= "üè† ‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å: {$request['department']}\n";
        $message .= "üéØ ‡πÑ‡∏õ‡πÅ‡∏ú‡∏ô‡∏Å: {$request['department2']}\n";
        $message .= "üë®‚Äç‚öïÔ∏è ‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡πÄ‡∏õ‡∏•: {$request['dname']}\n";
        
        if (!empty($request['from_note'])) {
            $message .= "üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: {$request['from_note']}\n";
        }
        
        $message .= "üïê ‡πÄ‡∏ß‡∏•‡∏≤: " . now()->format('d/m/Y H:i:s') . "\n";
        $message .= "=================================\n";
        $message .= "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏î‡πà‡∏ß‡∏ô!";

        return $message;
    }

    /**
     * ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
     */
    private function sendUrgentNotifications($requestData, $message)
    {
        $urgentMessage = "üö®üö® URGENT ALERT üö®üö®r\n";
        $urgentMessage .= $message;
        $urgentMessage .= "\n‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ!";

        // ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        for ($i = 0; $i < 3; $i++) {
            $this->sendTelegramNotification($urgentMessage);
            $this->sendMorphromNotification($urgentMessage);
            
            if ($i < 2) sleep(2); // ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ
        }
    }

    /**
     * ‡∏™‡πà‡∏á Telegram Notification
     */
    private function sendTelegramNotification($message)
    {
        try {
            $token = env('TELEGRAM_TOKEN');
            $chatId = env('TELEGRAM_CHATID');
            
            if (!$token || !$chatId) {
                Log::warning('‚ö†Ô∏è Telegram credentials not configured');
                return;
            }

            $url = "https://api.telegram.org/bot{$token}/sendMessage";
            
            $response = \Illuminate\Support\Facades\Http::timeout(10)->post($url, [
                'chat_id' => $chatId,
                'text' => $message,
                'parse_mode' => 'HTML',
                'disable_web_page_preview' => true
            ]);

            if ($response->successful()) {
                Log::info('‚úÖ Telegram notification sent successfully');
            } else {
                Log::error('‚ùå Telegram API error: ' . $response->body());
            }
            
        } catch (\Exception $e) {
            Log::error('‚ùå Telegram notification failed: ' . $e->getMessage());
        }
    }

    /**
     * ‡∏™‡πà‡∏á MoPH Notification
     */
    private function sendMorphromNotification($message)
    {
        try {
            $client_id = env('MOPH_CLIENT');
            $secret_key = env('MOPH_SECRET');
            
            if (!$client_id || !$secret_key) {
                Log::warning('‚ö†Ô∏è MoPH credentials not configured');
                return;
            }

            $url = 'https://morpromt2f.moph.go.th/api/notify/send';
            $data = [
                "messages" => [
                    [
                        "type" => "text",
                        "text" => $message
                    ]
                ]
            ];

            $response = \Illuminate\Support\Facades\Http::timeout(10)
                ->withHeaders([
                    'Content-Type' => 'application/json',
                    'client-key' => $client_id,
                    'secret-key' => $secret_key,
                ])
                ->withOptions(['verify' => false])
                ->post($url, $data);

            if ($response->successful()) {
                Log::info('‚úÖ MoPH notification sent successfully');
            } else {
                Log::error('‚ùå MoPH API error: ' . $response->body());
            }
            
        } catch (\Exception $e) {
            Log::error('‚ùå MorProm notification failed: ' . $e->getMessage());
        }
    }
}